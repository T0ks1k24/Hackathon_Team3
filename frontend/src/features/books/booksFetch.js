const API_URL = "http://3.77.211.196/api/books/book";

// üìö GET ALL BOOKS
export const fetchBooks = async (page = 1) => {
  try {
    const params = new URLSearchParams({ page });
    const response = await fetch(`${API_URL}?${params.toString()}`);

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json(); // ‚úÖ FIX
    return data;
  } catch (error) {
    console.error("Error fetching books:", error);
    return { results: [], count: 0 };
  }
};

// üìò GET BOOK BY ID
export const fetchBookById = async (id) => {
  try {
    const response = await fetch(`${API_URL}/${id}/`);

    const text = await response.text();
    console.log(`RAW response fetchBookById (ID=${id}):`, text);

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = JSON.parse(text); // –∞–±–æ response.json(), —è–∫—â–æ –Ω–µ —Ç—Ä–µ–±–∞ –ª–æ–≥ raw
    return data;
  } catch (error) {
    console.error(`Error fetching book with ID ${id}:`, error);
    return null;
  }
};

// üîé SEARCH
export async function fetchBooksBySearch(searchTerm, page = 1) {
  try {
    const params = new URLSearchParams({
      search: searchTerm,
      page,
    });
    const response = await fetch(`${API_URL}?${params.toString()}`);

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json(); // ‚úÖ FIX
    return data;
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–Ω–∏–≥:", error);
    return { results: [], count: 0 };
  }
}

// üé≠ FILTER BY GENRE
export async function fetchBooksByGenre(genre, page = 1) {
  try {
    const params = new URLSearchParams({
      genre: genre, // –Ω–µ —Ç—Ä–µ–±–∞ encodeURIComponent —Ç—É—Ç, URLSearchParams –≤–∂–µ –∫–æ–¥—É—î
      page,
    });
    const response = await fetch(`${API_URL}?${params.toString()}`);

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return data;
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–Ω–∏–≥ –∑–∞ –∂–∞–Ω—Ä–æ–º:", error);
    return { results: [], count: 0 };
  }
}
